# `_oasis` contains the configuration for launching `oasis setup`,
# which creates the ./configure + Makefile for the project.
# Running `oasis setup` is only required when _oasis is modified.
#
# Note that menhirLib is required to be >= 20150118 because the feature
# "incremental API" has been introduced at that version.
###############
# To install oasis:
#     opam install oasis
# To install menhir, fileutils, minisat and yices2:
#     opam install menhir fileutils minisat yices2
###############
# To force using 'bytecode' over 'native' binary for debugging with
# ocamldebug or utop, launch:
#     ./configure --override is_native false
#
###############
# To distribute to OPAM,
# - modify the 'Version:' field; this field will be used for creating
#   the version.ml instead of using 'git describe --tags' because git
#   information is not available in archive tar.gz from github.
# - 1. `oasis setup`
#       `oasis2opam --local -y`
#       `git add setup.ml _oasis opam/opam`
#       `git commit -m "Bump to v2.4.0"`
#    NOTE: these three steps can be done with 'make version VERSION=2.4.0'
# 2. create the tag, for example `git tag -s v2.4.0`
# 3. push all that: `git push --tags`
# 4. run `oasis2opam https://github.com/touist/touist/archive/v2.4.0.tar.gz`
# 5. run `opam-publish submit touist.2.4.0`

OASISFormat:  0.4
OcamlVersion: >= 4.01.0
Name:         touist
Version:      3.4.0
Synopsis:     The solver for the Touist language
Description:  The Touist language is a friendly language for writing
  propositional logic (SAT), logic on real and integers (SMT) and quantified
  boolean formulas (QBF). This language aims to formalize real-life problems
  (e.g., the sudoku can be solved in a few lines). Touist embeds a SAT solver
  (minisat) and can be built with optionnal SMT and QBF solvers.
  Touist is also able to generate the latex, DIMACS, SMT-LIB and QDIMACS
  formats from a touist file.

   Optionnal solvers:
   - for using the embeded SMT solver, run `opam install yices2` and then do
     `opam reinstall touist`
   - for using the embeded QBF solver, run `opam install qbf` and then do
     `opam reinstall touist`

Maintainers:  Maël Valais <mael.valais@gmail.com>
Authors:      Maël Valais <mael.valais@gmail.com>, Olivier Lezaud
Homepage:     https://www.irit.fr/touist
License:      MIT
Plugins:      META (0.4), DevFiles (0.4)
BuildType:    ocamlbuild (0.4)
BuildTools:   ocamlbuild
AlphaFeatures: ocamlbuild_more_args
BetaFeatures: section_object
#XOCamlbuildPluginTags: package(cppo_ocamlbuild)           <- see (1)

# (1) I had to comment this field and put the -plugin-tags it in 'ExtraArgs'
# instead because oasis would add single-quotes around package(cppo_ocamlbuild);
# single-quotes aren't interpreted by 'cmd' on windows, and thus they are left
# as is, triggering an error. Instead, I use double-quotes.
# Note that cppo_ocamlbuild is available in ocaml >= 4.01.0 and cppo >= 0.9.4

Flag yices2
  Default: false
  Description: enable yices2 solver (SMT)
Flag qbf
  Default: false
  Description: enable quantor  solver (QBF)
Flag lib
  Default: false
  Description: enable library install

PreBuildCommand: make pre-build HAS_YICES2=$yices2 HAS_QBF=$qbf VERSION=$pkg_version
PostCleanCommand: make clean-pre-build

XOCamlbuildExtraArgs: -menhir \"menhir --table --inspection -v -la 2 --explain\" -plugin-tags \"package(cppo_ocamlbuild)\"

# IMPORTANT: the library name is 'touist', so when calling ocamlc we must add
#     ocamlfind ocamlc -package touist
# but inside of the .ml files that use the functions, you just have to do:
#     open Parse (or Sat, Smt, Eval...)
Library touist
  Install$:       flag(lib)
  Path:           src/lib
  Modules:        Parse,Eval,Cnf,Sat,Smt,Pprint,Latex,Msgs,Types
  InternalModules: Lexer,Parser,Parser_error_report
  BuildTools+:    menhir, cppo
  BuildDepends:   menhirLib (>= 20151023), fileutils (>= 0.4.0), str,
                  minisat, cppo_ocamlbuild (>= 0.9.4)

Library touist_yices2
  Build$:         flag(yices2)
  Install$:       flag(yices2) && flag(lib)
  Path:           src/lib/yices2
  Modules:        Solvesmt
  BuildDepends:   touist, yices2 (>= 0.0.2)
  FindlibParent:  touist
  FindlibName:    yices2

Library touist_qbf
  Build$:         flag(qbf)
  Install$:       flag(qbf) && flag(lib)
  Path:           src/lib/qbf
  Modules:        Solveqbf
  BuildDepends:   qbf (>= 0.1), qbf.quantor, touist
  FindlibParent:  touist
  FindlibName:    qbf

# The 'custom' mode forces the use of static libraries (this is important when
# using qbf). It allows the binary to be stand-alone.
Executable touist
  CompiledObject: best
  Path:           src
  MainIs:         touist.ml
  BuildDepends:   touist
  Custom:         true
# if flag(yices2)
#   BuildDepends+:touist.yices2         <- not possible on oasis 0.4.8. See (2)
# if flag(qbf)
#   BuildDepends+:touist.qbf

# (2) the whole magic for adding 'touist_yices' (respectively 'touist_qbf') in
# 'BuildDepends:' when flag 'yices2' is enabled (using --enable-yices2) is
# handled in a custom way at the end of myocamlbuild.ml. Inspiration comes from
# the github project Drup/LILiS. When flag yices2 is enabled:
# - we define the preprocessor macro '-D yices2' (using cppo),
# - 'touist' and 'test' executables are linked against touist_yices2 and yices2
#   using the tags 'use_touist_yices' and 'package(yices2)'.
# - 'touist' and 'test' executables are built with '-I src/lib/yices2' include.

# This produces the test.byte executable; to enable it,
# ./configure --enable-tests
Executable test
  Build$:         flag(tests)
  Install:        false
  Path:           test
  MainIs:         test.ml
  BuildTools+:    touist
  BuildDepends:   touist, oUnit # Conditional: touist.yices2, touist.qbf. See (2)

Test test
  Run$: flag(tests)
  Command:          $test
  WorkingDirectory: .
  TestTools: test

Document touist
  Title: API reference for the Touist compiler
  Type: ocamlbuild (0.4)
  Install: false
  InstallDir: $htmldir/api
  BuildTools+: ocamldoc
  XOCamlbuildPath: src/lib
  XOCamlbuildLibraries: touist
  XOCamlbuildExtraArgs: -docflags \"-colorize-code -short-functors -charset utf-8\"
  XOCamlbuildExtraArgs+:-use-menhir -menhir \"menhir --table --inspection -v -la 2\"

SourceRepository master
  Type:           git
  Location:       https://github.com/touist/touist.git
  Browser:        https://github.com/touist/touist
