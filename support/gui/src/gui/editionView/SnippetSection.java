/*
 *
 * Project TouIST, 2015. Easily formalize and solve real-world sized problems
 * using propositional logic and linear theory of reals with a nice GUI.
 *
 * https://github.com/touist/touist
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *     Alexis Comte, Abdelwahab Heba, Olivier Lezaud,
 *     Skander Ben Slimane, MaÃ«l Valais
 *
 */

package gui.editionView;

import org.kordamp.ikonli.Ikon;
import org.kordamp.ikonli.fontawesome.FontAwesomeIkonHandler;
import org.kordamp.ikonli.swing.FontIcon;

import java.awt.GridLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @author Skander
 */
public class SnippetSection extends javax.swing.JPanel {

    private List<InsertionButton> buttons;
    private Icon foldedIcon;
    private Icon unfoldedIcon;
    private boolean isFold;

    
    /**
     * Creates new form SnippetSection
     * @param name section name.
     */
    public SnippetSection(String name) {
        initComponents();
        snippetSectionName.setText(name);
        snippetExpandButton.setText("");
        try {
			foldedIcon = new ImageIcon(ImageIO.read(getClass().getResourceAsStream("/images/paletteSectionFolded.png")));
	        unfoldedIcon = new ImageIcon(ImageIO.read(getClass().getResourceAsStream("/images/paletteSectionUnfolded.png")));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        FontIcon f = new FontIcon();
        f.setIkon(new FontAwesomeIkonHandler().resolve("fa-angle-down"));
        f.setIconSize(16);
        foldedIcon = f;
        f = new FontIcon();
        f.setIkon(new FontAwesomeIkonHandler().resolve("fa-angle-left"));
        f.setIconSize(16);
        unfoldedIcon = f;
        snippetExpandButton.setIcon(unfoldedIcon);
        buttons = new ArrayList<InsertionButton>();
        isFold = true;
    }
    
    public void setText(String name) {
    	snippetSectionName.setText(name);
    }
    
    public List<InsertionButton> getButtons() {
        return buttons;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snippetSectionName = new javax.swing.JLabel();
        snippetExpandButton = new javax.swing.JButton();
        snippetContainer = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        snippetSectionName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        snippetSectionName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snippetSectionName.setText("<section>");

        snippetExpandButton.setText(">");
        snippetExpandButton.setBorderPainted(false);
        snippetExpandButton.setContentAreaFilled(false);
        snippetExpandButton.setFocusable(false);
        snippetExpandButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        snippetExpandButton.setPreferredSize(new java.awt.Dimension(22, 22));
        snippetExpandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snippetExpandButtonActionPerformed(evt);
            }
        });

        snippetContainer.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(snippetContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(snippetSectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 10, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(snippetExpandButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(snippetExpandButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(snippetSectionName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addComponent(snippetContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void snippetExpandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snippetExpandButtonActionPerformed
        isFold = !isFold;
        if (isFold) {
            snippetExpandButton.setIcon(foldedIcon);
            snippetContainer.removeAll();
            snippetContainer.updateUI();
        } else {
            snippetExpandButton.setIcon(unfoldedIcon);
            snippetContainer.setLayout(new GridLayout(buttons.size(), 1));
            for (InsertionButton button : buttons) {
                snippetContainer.add(button);
            }
            snippetContainer.updateUI();
        }
    }//GEN-LAST:event_snippetExpandButtonActionPerformed

public void addInsertButton(InsertionButton button) {
    buttons.add(button);
    updateUI();
}

public void fold() {
    isFold = true;
    snippetExpandButton.setIcon(foldedIcon);
    snippetContainer.removeAll();
    snippetContainer.updateUI();
}

public void unfold() {
    isFold = false;
    snippetExpandButton.setIcon(unfoldedIcon);
    snippetContainer.setLayout(new GridLayout(buttons.size(), 1));
    for (InsertionButton button : buttons) {
        snippetContainer.add(button);
    }
    updateUI();
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel snippetContainer;
    private javax.swing.JButton snippetExpandButton;
    private javax.swing.JLabel snippetSectionName;
    // End of variables declaration//GEN-END:variables
}
